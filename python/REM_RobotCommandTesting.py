# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ] [  32  ] [  33  ] [  34  ] [  35  ] [  36  ] [  37  ] [  38  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- timestamp
-------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- angularVelocity
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- cameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef4
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelPWM1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- wheelPWM2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- wheelPWM3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- wheelPWM4
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- -------- useWheelSpeedRef
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- -------- useWheelPWMRef
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --1111-- -------- -------- kickChipPower
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ------1- -------- -------- doKick
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------1 -------- -------- doChip
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- kickAtAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- doForce
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --1----- -------- feedback
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ---1---- -------- useCameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1--- -------- useAbsoluteAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----111 -------- unused
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 dribbler
"""

import numpy as np
from . import REM_BaseTypes



class REM_RobotCommandTesting:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    toRobotId = 0             # integer [0, 15]              Id of the receiving robot
    toColor = 0               # integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    toBC = 0                  # integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    toBS = 0                  # integer [0, 1]               Bit indicating this packet is meant for the basestation
    toPC = 0                  # integer [0, 1]               Bit indicating this packet is meant for the PC
    fromRobotId = 0           # integer [0, 15]              Id of the transmitting robot
    fromColor = 0             # integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    reserved = 0              # integer [0, 1]               reserved
    fromBS = 0                # integer [0, 1]               Bit indicating this packet is coming from the basestation
    fromPC = 0                # integer [0, 1]               Bit indicating this packet is coming from the PC
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    messageId = 0             # integer [0, 15]              messageId. Can be used for aligning packets
    timestamp = 0             # integer [0, 1099511627775]   Unix Timestamp in centiseconds
    payloadSize = 0           # integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    rho = 0                   # float   [0.000, 30.000]      Magnitude of movement (m/s)
    theta = 0                 # float   [-3.142, 3.142]      Direction of movement (radians)
    angle = 0                 # float   [-3.142, 3.142]      Absolute angle (rad)
    angularVelocity = 0       # float   [-31.416, 31.416]    Angular velocity (rad/s)
    cameraAngle = 0           # float   [-3.142, 3.142]      Angle of the robot as seen by camera (rad)
    wheelSpeedRef1 = 0        # float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 1
    wheelSpeedRef2 = 0        # float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 2
    wheelSpeedRef3 = 0        # float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 3
    wheelSpeedRef4 = 0        # float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 4
    wheelPWM1 = 0             # float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 1
    wheelPWM2 = 0             # float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 2
    wheelPWM3 = 0             # float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 3
    wheelPWM4 = 0             # float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 4
    useWheelSpeedRef = 0      # integer [0, 1]               If set to 1 use the wheelSpeedRefX, if set to 0 use the rho/theta/angle/angular velocity
    useWheelPWMRef = 0        # integer [0, 1]               If set to 1 use the wheelPWMRefX, if set to 0 use the rho/theta/angle/angular velocity
    kickChipPower = 0         # float   [0.000, 6.500]       Speed of the ball in m/s
    doKick = 0                # integer [0, 1]               Do a kick if ballsensor
    doChip = 0                # integer [0, 1]               Do a chip if ballsensor
    kickAtAngle = 0           # integer [0, 1]               Do a kick once angle is reached
    doForce = 0               # integer [0, 1]               Do regardless of ballsensor
    feedback = 0              # integer [0, 1]               Ignore the packet. Just send feedback
    useCameraAngle = 0        # integer [0, 1]               Use the info in 'cameraAngle'
    useAbsoluteAngle = 0      # integer [0, 1]               0 = angular velocity, 1 = absolute angle
    unused = 0                # integer [0, 7]               Unused bits
    dribbler = 0              # float   [0.000, 1.000]       Dribbler speed



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_toRobotId(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_toColor(payload):
        return (payload[1] & 0b00001000) > 0;

    @staticmethod
    def get_toBC(payload):
        return (payload[1] & 0b00000100) > 0;

    @staticmethod
    def get_toBS(payload):
        return (payload[1] & 0b00000010) > 0;

    @staticmethod
    def get_toPC(payload):
        return (payload[1] & 0b00000001) > 0;

    @staticmethod
    def get_fromRobotId(payload):
        return ((payload[2] & 0b11110000) >> 4);

    @staticmethod
    def get_fromColor(payload):
        return (payload[2] & 0b00001000) > 0;

    @staticmethod
    def get_reserved(payload):
        return (payload[2] & 0b00000100) > 0;

    @staticmethod
    def get_fromBS(payload):
        return (payload[2] & 0b00000010) > 0;

    @staticmethod
    def get_fromPC(payload):
        return (payload[2] & 0b00000001) > 0;

    @staticmethod
    def get_remVersion(payload):
        return ((payload[3] & 0b11110000) >> 4);

    @staticmethod
    def get_messageId(payload):
        return ((payload[3] & 0b00001111));

    @staticmethod
    def get_timestamp(payload):
        return ((payload[4]) << 32) | ((payload[5]) << 24) | ((payload[6]) << 16) | ((payload[7]) << 8) | ((payload[8]));

    @staticmethod
    def get_payloadSize(payload):
        return ((payload[9]));

    @staticmethod
    def get_rho(payload):
        _rho = ((payload[10]) << 8) | ((payload[11]));
        return (_rho * 0.0004577706569009);

    @staticmethod
    def get_theta(payload):
        _theta = ((payload[12]) << 8) | ((payload[13]));
        return (_theta * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_angle(payload):
        _angle = ((payload[14]) << 8) | ((payload[15]));
        return (_angle * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_angularVelocity(payload):
        _angularVelocity = ((payload[16]) << 8) | ((payload[17]));
        return (_angularVelocity * 0.0009587526218325) + -31.4159265358979312;

    @staticmethod
    def get_cameraAngle(payload):
        _cameraAngle = ((payload[18]) << 8) | ((payload[19]));
        return (_cameraAngle * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_wheelSpeedRef1(payload):
        _wheelSpeedRef1 = ((payload[20]) << 8) | ((payload[21]));
        return (_wheelSpeedRef1 * 0.0305180437933928) + -1000.0000000000000000;

    @staticmethod
    def get_wheelSpeedRef2(payload):
        _wheelSpeedRef2 = ((payload[22]) << 8) | ((payload[23]));
        return (_wheelSpeedRef2 * 0.0305180437933928) + -1000.0000000000000000;

    @staticmethod
    def get_wheelSpeedRef3(payload):
        _wheelSpeedRef3 = ((payload[24]) << 8) | ((payload[25]));
        return (_wheelSpeedRef3 * 0.0305180437933928) + -1000.0000000000000000;

    @staticmethod
    def get_wheelSpeedRef4(payload):
        _wheelSpeedRef4 = ((payload[26]) << 8) | ((payload[27]));
        return (_wheelSpeedRef4 * 0.0305180437933928) + -1000.0000000000000000;

    @staticmethod
    def get_wheelPWM1(payload):
        _wheelPWM1 = ((payload[28]) << 8) | ((payload[29]));
        return (_wheelPWM1 * 0.0000305180437934) + -1.0000000000000000;

    @staticmethod
    def get_wheelPWM2(payload):
        _wheelPWM2 = ((payload[30]) << 8) | ((payload[31]));
        return (_wheelPWM2 * 0.0000305180437934) + -1.0000000000000000;

    @staticmethod
    def get_wheelPWM3(payload):
        _wheelPWM3 = ((payload[32]) << 8) | ((payload[33]));
        return (_wheelPWM3 * 0.0000305180437934) + -1.0000000000000000;

    @staticmethod
    def get_wheelPWM4(payload):
        _wheelPWM4 = ((payload[34]) << 8) | ((payload[35]));
        return (_wheelPWM4 * 0.0000305180437934) + -1.0000000000000000;

    @staticmethod
    def get_useWheelSpeedRef(payload):
        return (payload[36] & 0b10000000) > 0;

    @staticmethod
    def get_useWheelPWMRef(payload):
        return (payload[36] & 0b01000000) > 0;

    @staticmethod
    def get_kickChipPower(payload):
        _kickChipPower = ((payload[36] & 0b00111100) >> 2);
        return (_kickChipPower * 0.4333333333333333);

    @staticmethod
    def get_doKick(payload):
        return (payload[36] & 0b00000010) > 0;

    @staticmethod
    def get_doChip(payload):
        return (payload[36] & 0b00000001) > 0;

    @staticmethod
    def get_kickAtAngle(payload):
        return (payload[37] & 0b10000000) > 0;

    @staticmethod
    def get_doForce(payload):
        return (payload[37] & 0b01000000) > 0;

    @staticmethod
    def get_feedback(payload):
        return (payload[37] & 0b00100000) > 0;

    @staticmethod
    def get_useCameraAngle(payload):
        return (payload[37] & 0b00010000) > 0;

    @staticmethod
    def get_useAbsoluteAngle(payload):
        return (payload[37] & 0b00001000) > 0;

    @staticmethod
    def get_unused(payload):
        return ((payload[37] & 0b00000111));

    @staticmethod
    def get_dribbler(payload):
        _dribbler = ((payload[38]));
        return (_dribbler * 0.0039215686274510);

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_toRobotId(payload, toRobotId):
        payload[1] = ((toRobotId << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_toColor(payload, toColor):
        payload[1] = ((toColor << 3) & 0b00001000) | (payload[1] & 0b11110111);

    @staticmethod
    def set_toBC(payload, toBC):
        payload[1] = ((toBC << 2) & 0b00000100) | (payload[1] & 0b11111011);

    @staticmethod
    def set_toBS(payload, toBS):
        payload[1] = ((toBS << 1) & 0b00000010) | (payload[1] & 0b11111101);

    @staticmethod
    def set_toPC(payload, toPC):
        payload[1] = (toPC & 0b00000001) | (payload[1] & 0b11111110);

    @staticmethod
    def set_fromRobotId(payload, fromRobotId):
        payload[2] = ((fromRobotId << 4) & 0b11110000) | (payload[2] & 0b00001111);

    @staticmethod
    def set_fromColor(payload, fromColor):
        payload[2] = ((fromColor << 3) & 0b00001000) | (payload[2] & 0b11110111);

    @staticmethod
    def set_reserved(payload, reserved):
        payload[2] = ((reserved << 2) & 0b00000100) | (payload[2] & 0b11111011);

    @staticmethod
    def set_fromBS(payload, fromBS):
        payload[2] = ((fromBS << 1) & 0b00000010) | (payload[2] & 0b11111101);

    @staticmethod
    def set_fromPC(payload, fromPC):
        payload[2] = (fromPC & 0b00000001) | (payload[2] & 0b11111110);

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[3] = ((remVersion << 4) & 0b11110000) | (payload[3] & 0b00001111);

    @staticmethod
    def set_messageId(payload, messageId):
        payload[3] = (messageId & 0b00001111) | (payload[3] & 0b11110000);

    @staticmethod
    def set_timestamp(payload, timestamp):
        payload[4] = (timestamp >> 32);
        payload[5] = (timestamp >> 24);
        payload[6] = (timestamp >> 16);
        payload[7] = (timestamp >> 8);
        payload[8] = timestamp;

    @staticmethod
    def set_payloadSize(payload, payloadSize):
        payload[9] = payloadSize;

    @staticmethod
    def set_rho(payload, rho):
        _rho = int(rho / 0.0004577706569009);
        payload[10] = (_rho >> 8);
        payload[11] = _rho;

    @staticmethod
    def set_theta(payload, theta):
        _theta = int((theta +3.1415926535897931) / 0.0000958752621833);
        payload[12] = (_theta >> 8);
        payload[13] = _theta;

    @staticmethod
    def set_angle(payload, angle):
        _angle = int((angle +3.1415926535897931) / 0.0000958752621833);
        payload[14] = (_angle >> 8);
        payload[15] = _angle;

    @staticmethod
    def set_angularVelocity(payload, angularVelocity):
        _angularVelocity = int((angularVelocity +31.4159265358979312) / 0.0009587526218325);
        payload[16] = (_angularVelocity >> 8);
        payload[17] = _angularVelocity;

    @staticmethod
    def set_cameraAngle(payload, cameraAngle):
        _cameraAngle = int((cameraAngle +3.1415926535897931) / 0.0000958752621833);
        payload[18] = (_cameraAngle >> 8);
        payload[19] = _cameraAngle;

    @staticmethod
    def set_wheelSpeedRef1(payload, wheelSpeedRef1):
        _wheelSpeedRef1 = int((wheelSpeedRef1 +1000.0000000000000000) / 0.0305180437933928);
        payload[20] = (_wheelSpeedRef1 >> 8);
        payload[21] = _wheelSpeedRef1;

    @staticmethod
    def set_wheelSpeedRef2(payload, wheelSpeedRef2):
        _wheelSpeedRef2 = int((wheelSpeedRef2 +1000.0000000000000000) / 0.0305180437933928);
        payload[22] = (_wheelSpeedRef2 >> 8);
        payload[23] = _wheelSpeedRef2;

    @staticmethod
    def set_wheelSpeedRef3(payload, wheelSpeedRef3):
        _wheelSpeedRef3 = int((wheelSpeedRef3 +1000.0000000000000000) / 0.0305180437933928);
        payload[24] = (_wheelSpeedRef3 >> 8);
        payload[25] = _wheelSpeedRef3;

    @staticmethod
    def set_wheelSpeedRef4(payload, wheelSpeedRef4):
        _wheelSpeedRef4 = int((wheelSpeedRef4 +1000.0000000000000000) / 0.0305180437933928);
        payload[26] = (_wheelSpeedRef4 >> 8);
        payload[27] = _wheelSpeedRef4;

    @staticmethod
    def set_wheelPWM1(payload, wheelPWM1):
        _wheelPWM1 = int((wheelPWM1 +1.0000000000000000) / 0.0000305180437934);
        payload[28] = (_wheelPWM1 >> 8);
        payload[29] = _wheelPWM1;

    @staticmethod
    def set_wheelPWM2(payload, wheelPWM2):
        _wheelPWM2 = int((wheelPWM2 +1.0000000000000000) / 0.0000305180437934);
        payload[30] = (_wheelPWM2 >> 8);
        payload[31] = _wheelPWM2;

    @staticmethod
    def set_wheelPWM3(payload, wheelPWM3):
        _wheelPWM3 = int((wheelPWM3 +1.0000000000000000) / 0.0000305180437934);
        payload[32] = (_wheelPWM3 >> 8);
        payload[33] = _wheelPWM3;

    @staticmethod
    def set_wheelPWM4(payload, wheelPWM4):
        _wheelPWM4 = int((wheelPWM4 +1.0000000000000000) / 0.0000305180437934);
        payload[34] = (_wheelPWM4 >> 8);
        payload[35] = _wheelPWM4;

    @staticmethod
    def set_useWheelSpeedRef(payload, useWheelSpeedRef):
        payload[36] = ((useWheelSpeedRef << 7) & 0b10000000) | (payload[36] & 0b01111111);

    @staticmethod
    def set_useWheelPWMRef(payload, useWheelPWMRef):
        payload[36] = ((useWheelPWMRef << 6) & 0b01000000) | (payload[36] & 0b10111111);

    @staticmethod
    def set_kickChipPower(payload, kickChipPower):
        _kickChipPower = int(kickChipPower / 0.4333333333333333);
        payload[36] = ((_kickChipPower << 2) & 0b00111100) | (payload[36] & 0b11000011);

    @staticmethod
    def set_doKick(payload, doKick):
        payload[36] = ((doKick << 1) & 0b00000010) | (payload[36] & 0b11111101);

    @staticmethod
    def set_doChip(payload, doChip):
        payload[36] = (doChip & 0b00000001) | (payload[36] & 0b11111110);

    @staticmethod
    def set_kickAtAngle(payload, kickAtAngle):
        payload[37] = ((kickAtAngle << 7) & 0b10000000) | (payload[37] & 0b01111111);

    @staticmethod
    def set_doForce(payload, doForce):
        payload[37] = ((doForce << 6) & 0b01000000) | (payload[37] & 0b10111111);

    @staticmethod
    def set_feedback(payload, feedback):
        payload[37] = ((feedback << 5) & 0b00100000) | (payload[37] & 0b11011111);

    @staticmethod
    def set_useCameraAngle(payload, useCameraAngle):
        payload[37] = ((useCameraAngle << 4) & 0b00010000) | (payload[37] & 0b11101111);

    @staticmethod
    def set_useAbsoluteAngle(payload, useAbsoluteAngle):
        payload[37] = ((useAbsoluteAngle << 3) & 0b00001000) | (payload[37] & 0b11110111);

    @staticmethod
    def set_unused(payload, unused):
        payload[37] = (unused & 0b00000111) | (payload[37] & 0b11111000);

    @staticmethod
    def set_dribbler(payload, dribbler):
        _dribbler = int(dribbler / 0.0039215686274510);
        payload[38] = _dribbler;

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.REM_PACKET_SIZE_REM_ROBOT_COMMAND_TESTING, dtype=np.uint8)
        REM_RobotCommandTesting.set_header              (payload, self.header)
        REM_RobotCommandTesting.set_toRobotId           (payload, self.toRobotId)
        REM_RobotCommandTesting.set_toColor             (payload, self.toColor)
        REM_RobotCommandTesting.set_toBC                (payload, self.toBC)
        REM_RobotCommandTesting.set_toBS                (payload, self.toBS)
        REM_RobotCommandTesting.set_toPC                (payload, self.toPC)
        REM_RobotCommandTesting.set_fromRobotId         (payload, self.fromRobotId)
        REM_RobotCommandTesting.set_fromColor           (payload, self.fromColor)
        REM_RobotCommandTesting.set_reserved            (payload, self.reserved)
        REM_RobotCommandTesting.set_fromBS              (payload, self.fromBS)
        REM_RobotCommandTesting.set_fromPC              (payload, self.fromPC)
        REM_RobotCommandTesting.set_remVersion          (payload, self.remVersion)
        REM_RobotCommandTesting.set_messageId           (payload, self.messageId)
        REM_RobotCommandTesting.set_timestamp           (payload, self.timestamp)
        REM_RobotCommandTesting.set_payloadSize         (payload, self.payloadSize)
        REM_RobotCommandTesting.set_rho                 (payload, self.rho)
        REM_RobotCommandTesting.set_theta               (payload, self.theta)
        REM_RobotCommandTesting.set_angle               (payload, self.angle)
        REM_RobotCommandTesting.set_angularVelocity     (payload, self.angularVelocity)
        REM_RobotCommandTesting.set_cameraAngle         (payload, self.cameraAngle)
        REM_RobotCommandTesting.set_wheelSpeedRef1      (payload, self.wheelSpeedRef1)
        REM_RobotCommandTesting.set_wheelSpeedRef2      (payload, self.wheelSpeedRef2)
        REM_RobotCommandTesting.set_wheelSpeedRef3      (payload, self.wheelSpeedRef3)
        REM_RobotCommandTesting.set_wheelSpeedRef4      (payload, self.wheelSpeedRef4)
        REM_RobotCommandTesting.set_wheelPWM1           (payload, self.wheelPWM1)
        REM_RobotCommandTesting.set_wheelPWM2           (payload, self.wheelPWM2)
        REM_RobotCommandTesting.set_wheelPWM3           (payload, self.wheelPWM3)
        REM_RobotCommandTesting.set_wheelPWM4           (payload, self.wheelPWM4)
        REM_RobotCommandTesting.set_useWheelSpeedRef    (payload, self.useWheelSpeedRef)
        REM_RobotCommandTesting.set_useWheelPWMRef      (payload, self.useWheelPWMRef)
        REM_RobotCommandTesting.set_kickChipPower       (payload, self.kickChipPower)
        REM_RobotCommandTesting.set_doKick              (payload, self.doKick)
        REM_RobotCommandTesting.set_doChip              (payload, self.doChip)
        REM_RobotCommandTesting.set_kickAtAngle         (payload, self.kickAtAngle)
        REM_RobotCommandTesting.set_doForce             (payload, self.doForce)
        REM_RobotCommandTesting.set_feedback            (payload, self.feedback)
        REM_RobotCommandTesting.set_useCameraAngle      (payload, self.useCameraAngle)
        REM_RobotCommandTesting.set_useAbsoluteAngle    (payload, self.useAbsoluteAngle)
        REM_RobotCommandTesting.set_unused              (payload, self.unused)
        REM_RobotCommandTesting.set_dribbler            (payload, self.dribbler)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_RobotCommandTesting.get_header(payload)
        self.toRobotId        = REM_RobotCommandTesting.get_toRobotId(payload)
        self.toColor          = REM_RobotCommandTesting.get_toColor(payload)
        self.toBC             = REM_RobotCommandTesting.get_toBC(payload)
        self.toBS             = REM_RobotCommandTesting.get_toBS(payload)
        self.toPC             = REM_RobotCommandTesting.get_toPC(payload)
        self.fromRobotId      = REM_RobotCommandTesting.get_fromRobotId(payload)
        self.fromColor        = REM_RobotCommandTesting.get_fromColor(payload)
        self.reserved         = REM_RobotCommandTesting.get_reserved(payload)
        self.fromBS           = REM_RobotCommandTesting.get_fromBS(payload)
        self.fromPC           = REM_RobotCommandTesting.get_fromPC(payload)
        self.remVersion       = REM_RobotCommandTesting.get_remVersion(payload)
        self.messageId        = REM_RobotCommandTesting.get_messageId(payload)
        self.timestamp        = REM_RobotCommandTesting.get_timestamp(payload)
        self.payloadSize      = REM_RobotCommandTesting.get_payloadSize(payload)
        self.rho              = REM_RobotCommandTesting.get_rho(payload)
        self.theta            = REM_RobotCommandTesting.get_theta(payload)
        self.angle            = REM_RobotCommandTesting.get_angle(payload)
        self.angularVelocity  = REM_RobotCommandTesting.get_angularVelocity(payload)
        self.cameraAngle      = REM_RobotCommandTesting.get_cameraAngle(payload)
        self.wheelSpeedRef1   = REM_RobotCommandTesting.get_wheelSpeedRef1(payload)
        self.wheelSpeedRef2   = REM_RobotCommandTesting.get_wheelSpeedRef2(payload)
        self.wheelSpeedRef3   = REM_RobotCommandTesting.get_wheelSpeedRef3(payload)
        self.wheelSpeedRef4   = REM_RobotCommandTesting.get_wheelSpeedRef4(payload)
        self.wheelPWM1        = REM_RobotCommandTesting.get_wheelPWM1(payload)
        self.wheelPWM2        = REM_RobotCommandTesting.get_wheelPWM2(payload)
        self.wheelPWM3        = REM_RobotCommandTesting.get_wheelPWM3(payload)
        self.wheelPWM4        = REM_RobotCommandTesting.get_wheelPWM4(payload)
        self.useWheelSpeedRef = REM_RobotCommandTesting.get_useWheelSpeedRef(payload)
        self.useWheelPWMRef   = REM_RobotCommandTesting.get_useWheelPWMRef(payload)
        self.kickChipPower    = REM_RobotCommandTesting.get_kickChipPower(payload)
        self.doKick           = REM_RobotCommandTesting.get_doKick(payload)
        self.doChip           = REM_RobotCommandTesting.get_doChip(payload)
        self.kickAtAngle      = REM_RobotCommandTesting.get_kickAtAngle(payload)
        self.doForce          = REM_RobotCommandTesting.get_doForce(payload)
        self.feedback         = REM_RobotCommandTesting.get_feedback(payload)
        self.useCameraAngle   = REM_RobotCommandTesting.get_useCameraAngle(payload)
        self.useAbsoluteAngle = REM_RobotCommandTesting.get_useAbsoluteAngle(payload)
        self.unused           = REM_RobotCommandTesting.get_unused(payload)
        self.dribbler         = REM_RobotCommandTesting.get_dribbler(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
