// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyX
-------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyX
-------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyX
-------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyY
-------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyY
-------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyY
-------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- PbodyW
-------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- IbodyW
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- DbodyW
-------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- PbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- IbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- DbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- Pwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- Iwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 Dwheels
*/

#ifndef __CONFIGURATION_H
#define __CONFIGURATION_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _ConfigurationPayload {
    uint8_t payload[PACKET_SIZE_CONFIGURATION];
} ConfigurationPayload;

typedef struct _Configuration {
    float      PbodyX              ; // float   [0.000, 1.000]       P gain of the PID for body_x (x-direction)
    float      IbodyX              ; // float   [0.000, 1.000]       I gain of the PID for body_x (x-direction)
    float      DbodyX              ; // float   [0.000, 1.000]       D gain of the PID for body_x (x-direction)
    float      PbodyY              ; // float   [0.000, 1.000]       P gain of the PID for body_y (y-direction)
    float      IbodyY              ; // float   [0.000, 1.000]       I gain of the PID for body_y (y-direction)
    float      DbodyY              ; // float   [0.000, 1.000]       D gain of the PID for body_y (y-direction)
    float      PbodyW              ; // float   [0.000, 40.000]      P gain of the PID for body_w (Angular velocity)
    float      IbodyW              ; // float   [0.000, 20.000]      I gain of the PID for body_w (Angular velocity)
    float      DbodyW              ; // float   [0.000, 10.000]      D gain of the PID for body_w (Angular velocity)
    float      PbodyYaw            ; // float   [0.000, 40.000]      P gain of the PID for body_yaw (Absolute angle)
    float      IbodyYaw            ; // float   [0.000, 20.000]      I gain of the PID for body_yaw (Absolute angle)
    float      DbodyYaw            ; // float   [0.000, 10.000]      D gain of the PID for body_yaw (Absolute angle)
    float      Pwheels             ; // float   [0.000, 40.000]      P gain of the PID for the wheels
    float      Iwheels             ; // float   [0.000, 20.000]      I gain of the PID for the wheels
    float      Dwheels             ; // float   [0.000, 10.000]      D gain of the PID for the wheels
} Configuration;

// ================================ GETTERS ================================
static inline float Configuration_get_PbodyX(ConfigurationPayload *cp){
    uint32_t _PbodyX = ((cp->payload[0]));
    return (_PbodyX * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_IbodyX(ConfigurationPayload *cp){
    uint32_t _IbodyX = ((cp->payload[1]));
    return (_IbodyX * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_DbodyX(ConfigurationPayload *cp){
    uint32_t _DbodyX = ((cp->payload[2]));
    return (_DbodyX * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_PbodyY(ConfigurationPayload *cp){
    uint32_t _PbodyY = ((cp->payload[3]));
    return (_PbodyY * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_IbodyY(ConfigurationPayload *cp){
    uint32_t _IbodyY = ((cp->payload[4]));
    return (_IbodyY * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_DbodyY(ConfigurationPayload *cp){
    uint32_t _DbodyY = ((cp->payload[5]));
    return (_DbodyY * 0.0039215686274510) + 0.0000000000000000;
}

static inline float Configuration_get_PbodyW(ConfigurationPayload *cp){
    uint32_t _PbodyW = ((cp->payload[6]));
    return (_PbodyW * 0.1568627450980392) + 0.0000000000000000;
}

static inline float Configuration_get_IbodyW(ConfigurationPayload *cp){
    uint32_t _IbodyW = ((cp->payload[7]));
    return (_IbodyW * 0.0784313725490196) + 0.0000000000000000;
}

static inline float Configuration_get_DbodyW(ConfigurationPayload *cp){
    uint32_t _DbodyW = ((cp->payload[8]));
    return (_DbodyW * 0.0392156862745098) + 0.0000000000000000;
}

static inline float Configuration_get_PbodyYaw(ConfigurationPayload *cp){
    uint32_t _PbodyYaw = ((cp->payload[9]));
    return (_PbodyYaw * 0.1568627450980392) + 0.0000000000000000;
}

static inline float Configuration_get_IbodyYaw(ConfigurationPayload *cp){
    uint32_t _IbodyYaw = ((cp->payload[10]));
    return (_IbodyYaw * 0.0784313725490196) + 0.0000000000000000;
}

static inline float Configuration_get_DbodyYaw(ConfigurationPayload *cp){
    uint32_t _DbodyYaw = ((cp->payload[11]));
    return (_DbodyYaw * 0.0392156862745098) + 0.0000000000000000;
}

static inline float Configuration_get_Pwheels(ConfigurationPayload *cp){
    uint32_t _Pwheels = ((cp->payload[12]));
    return (_Pwheels * 0.1568627450980392) + 0.0000000000000000;
}

static inline float Configuration_get_Iwheels(ConfigurationPayload *cp){
    uint32_t _Iwheels = ((cp->payload[13]));
    return (_Iwheels * 0.0784313725490196) + 0.0000000000000000;
}

static inline float Configuration_get_Dwheels(ConfigurationPayload *cp){
    uint32_t _Dwheels = ((cp->payload[14]));
    return (_Dwheels * 0.0392156862745098) + 0.0000000000000000;
}

// ================================ SETTERS ================================
static inline void Configuration_set_PbodyX(ConfigurationPayload *cp, float PbodyX){
    uint32_t _PbodyX = (uint32_t)(PbodyX / 0.0039215686274510);
    cp->payload[0] = _PbodyX;
}

static inline void Configuration_set_IbodyX(ConfigurationPayload *cp, float IbodyX){
    uint32_t _IbodyX = (uint32_t)(IbodyX / 0.0039215686274510);
    cp->payload[1] = _IbodyX;
}

static inline void Configuration_set_DbodyX(ConfigurationPayload *cp, float DbodyX){
    uint32_t _DbodyX = (uint32_t)(DbodyX / 0.0039215686274510);
    cp->payload[2] = _DbodyX;
}

static inline void Configuration_set_PbodyY(ConfigurationPayload *cp, float PbodyY){
    uint32_t _PbodyY = (uint32_t)(PbodyY / 0.0039215686274510);
    cp->payload[3] = _PbodyY;
}

static inline void Configuration_set_IbodyY(ConfigurationPayload *cp, float IbodyY){
    uint32_t _IbodyY = (uint32_t)(IbodyY / 0.0039215686274510);
    cp->payload[4] = _IbodyY;
}

static inline void Configuration_set_DbodyY(ConfigurationPayload *cp, float DbodyY){
    uint32_t _DbodyY = (uint32_t)(DbodyY / 0.0039215686274510);
    cp->payload[5] = _DbodyY;
}

static inline void Configuration_set_PbodyW(ConfigurationPayload *cp, float PbodyW){
    uint32_t _PbodyW = (uint32_t)(PbodyW / 0.1568627450980392);
    cp->payload[6] = _PbodyW;
}

static inline void Configuration_set_IbodyW(ConfigurationPayload *cp, float IbodyW){
    uint32_t _IbodyW = (uint32_t)(IbodyW / 0.0784313725490196);
    cp->payload[7] = _IbodyW;
}

static inline void Configuration_set_DbodyW(ConfigurationPayload *cp, float DbodyW){
    uint32_t _DbodyW = (uint32_t)(DbodyW / 0.0392156862745098);
    cp->payload[8] = _DbodyW;
}

static inline void Configuration_set_PbodyYaw(ConfigurationPayload *cp, float PbodyYaw){
    uint32_t _PbodyYaw = (uint32_t)(PbodyYaw / 0.1568627450980392);
    cp->payload[9] = _PbodyYaw;
}

static inline void Configuration_set_IbodyYaw(ConfigurationPayload *cp, float IbodyYaw){
    uint32_t _IbodyYaw = (uint32_t)(IbodyYaw / 0.0784313725490196);
    cp->payload[10] = _IbodyYaw;
}

static inline void Configuration_set_DbodyYaw(ConfigurationPayload *cp, float DbodyYaw){
    uint32_t _DbodyYaw = (uint32_t)(DbodyYaw / 0.0392156862745098);
    cp->payload[11] = _DbodyYaw;
}

static inline void Configuration_set_Pwheels(ConfigurationPayload *cp, float Pwheels){
    uint32_t _Pwheels = (uint32_t)(Pwheels / 0.1568627450980392);
    cp->payload[12] = _Pwheels;
}

static inline void Configuration_set_Iwheels(ConfigurationPayload *cp, float Iwheels){
    uint32_t _Iwheels = (uint32_t)(Iwheels / 0.0784313725490196);
    cp->payload[13] = _Iwheels;
}

static inline void Configuration_set_Dwheels(ConfigurationPayload *cp, float Dwheels){
    uint32_t _Dwheels = (uint32_t)(Dwheels / 0.0392156862745098);
    cp->payload[14] = _Dwheels;
}

// ================================ ENCODE ================================
static inline void encodeConfiguration(ConfigurationPayload *cp, Configuration *c){
    Configuration_set_PbodyX              (cp, c->PbodyX);
    Configuration_set_IbodyX              (cp, c->IbodyX);
    Configuration_set_DbodyX              (cp, c->DbodyX);
    Configuration_set_PbodyY              (cp, c->PbodyY);
    Configuration_set_IbodyY              (cp, c->IbodyY);
    Configuration_set_DbodyY              (cp, c->DbodyY);
    Configuration_set_PbodyW              (cp, c->PbodyW);
    Configuration_set_IbodyW              (cp, c->IbodyW);
    Configuration_set_DbodyW              (cp, c->DbodyW);
    Configuration_set_PbodyYaw            (cp, c->PbodyYaw);
    Configuration_set_IbodyYaw            (cp, c->IbodyYaw);
    Configuration_set_DbodyYaw            (cp, c->DbodyYaw);
    Configuration_set_Pwheels             (cp, c->Pwheels);
    Configuration_set_Iwheels             (cp, c->Iwheels);
    Configuration_set_Dwheels             (cp, c->Dwheels);
}

// ================================ DECODE ================================
static inline void decodeConfiguration(Configuration *c, ConfigurationPayload *cp){
    c->PbodyX            = Configuration_get_PbodyX(cp);
    c->IbodyX            = Configuration_get_IbodyX(cp);
    c->DbodyX            = Configuration_get_DbodyX(cp);
    c->PbodyY            = Configuration_get_PbodyY(cp);
    c->IbodyY            = Configuration_get_IbodyY(cp);
    c->DbodyY            = Configuration_get_DbodyY(cp);
    c->PbodyW            = Configuration_get_PbodyW(cp);
    c->IbodyW            = Configuration_get_IbodyW(cp);
    c->DbodyW            = Configuration_get_DbodyW(cp);
    c->PbodyYaw          = Configuration_get_PbodyYaw(cp);
    c->IbodyYaw          = Configuration_get_IbodyYaw(cp);
    c->DbodyYaw          = Configuration_get_DbodyYaw(cp);
    c->Pwheels           = Configuration_get_Pwheels(cp);
    c->Iwheels           = Configuration_get_Iwheels(cp);
    c->Dwheels           = Configuration_get_Dwheels(cp);
}

#endif /*__CONFIGURATION_H*/
