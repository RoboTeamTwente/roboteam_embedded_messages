// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ] [  32  ] [  33  ] [  34  ] [  35  ] [  36  ] [  37  ] [  38  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- timestamp
-------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- angularVelocity
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- cameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeedRef4
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelPWM1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- wheelPWM2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- wheelPWM3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- wheelPWM4
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- -------- useWheelSpeedRef
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- -------- useWheelPWMRef
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --1111-- -------- -------- kickChipPower
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ------1- -------- -------- doKick
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------1 -------- -------- doChip
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- kickAtAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- doForce
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --1----- -------- feedback
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ---1---- -------- useCameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1--- -------- useAbsoluteAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----111 -------- unused
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 dribbler
*/

#ifndef __REM_ROBOT_COMMAND_TESTING_H
#define __REM_ROBOT_COMMAND_TESTING_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotCommandTestingPayload {
    uint8_t payload[REM_PACKET_SIZE_REM_ROBOT_COMMAND_TESTING];
} REM_RobotCommandTestingPayload;

typedef struct _REM_RobotCommandTesting {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       reserved            ; // integer [0, 1]               reserved
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint64_t   timestamp           ; // integer [0, 1099511627775]   Unix Timestamp in centiseconds
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    float      rho                 ; // float   [0.000, 30.000]      Magnitude of movement (m/s)
    float      theta               ; // float   [-3.142, 3.142]      Direction of movement (radians)
    float      angle               ; // float   [-3.142, 3.142]      Absolute angle (rad)
    float      angularVelocity     ; // float   [-31.416, 31.416]    Angular velocity (rad/s)
    float      cameraAngle         ; // float   [-3.142, 3.142]      Angle of the robot as seen by camera (rad)
    float      wheelSpeedRef1      ; // float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 1
    float      wheelSpeedRef2      ; // float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 2
    float      wheelSpeedRef3      ; // float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 3
    float      wheelSpeedRef4      ; // float   [-1000.000, 1000.000] Bypass the body control loop and directly set the refernce of wheel 4
    float      wheelPWM1           ; // float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 1
    float      wheelPWM2           ; // float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 2
    float      wheelPWM3           ; // float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 3
    float      wheelPWM4           ; // float   [-1.000, 1.000]      Bypass the body and wheel control loops and directly set the PWM input of wheel 4
    bool       useWheelSpeedRef    ; // integer [0, 1]               If set to 1 use the wheelSpeedRefX, if set to 0 use the rho/theta/angle/angular velocity
    bool       useWheelPWMRef      ; // integer [0, 1]               If set to 1 use the wheelPWMRefX, if set to 0 use the rho/theta/angle/angular velocity
    float      kickChipPower       ; // float   [0.000, 6.500]       Speed of the ball in m/s
    bool       doKick              ; // integer [0, 1]               Do a kick if ballsensor
    bool       doChip              ; // integer [0, 1]               Do a chip if ballsensor
    bool       kickAtAngle         ; // integer [0, 1]               Do a kick once angle is reached
    bool       doForce             ; // integer [0, 1]               Do regardless of ballsensor
    bool       feedback            ; // integer [0, 1]               Ignore the packet. Just send feedback
    bool       useCameraAngle      ; // integer [0, 1]               Use the info in 'cameraAngle'
    bool       useAbsoluteAngle    ; // integer [0, 1]               0 = angular velocity, 1 = absolute angle
    uint32_t   unused              ; // integer [0, 7]               Unused bits
    float      dribbler            ; // float   [0.000, 1.000]       Dribbler speed
} REM_RobotCommandTesting;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotCommandTesting_get_header(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[0]));
}

static inline uint32_t REM_RobotCommandTesting_get_toRobotId(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_RobotCommandTesting_get_toColor(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_RobotCommandTesting_get_toBC(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_RobotCommandTesting_get_toBS(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_RobotCommandTesting_get_toPC(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_RobotCommandTesting_get_fromRobotId(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_RobotCommandTesting_get_fromColor(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_RobotCommandTesting_get_reserved(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_RobotCommandTesting_get_fromBS(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_RobotCommandTesting_get_fromPC(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_RobotCommandTesting_get_remVersion(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotCommandTesting_get_messageId(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[3] & 0b00001111));
}

static inline uint64_t REM_RobotCommandTesting_get_timestamp(REM_RobotCommandTestingPayload *remrctp){
    return ((uint64_t) (remrctp->payload[4]) << 32) | ((uint32_t) (remrctp->payload[5]) << 24) | ((remrctp->payload[6]) << 16) | ((remrctp->payload[7]) << 8) | ((remrctp->payload[8]));
}

static inline uint32_t REM_RobotCommandTesting_get_payloadSize(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[9]));
}

static inline float REM_RobotCommandTesting_get_rho(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _rho = ((remrctp->payload[10]) << 8) | ((remrctp->payload[11]));
    return (_rho * 0.0004577706569009F);
}

static inline float REM_RobotCommandTesting_get_theta(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _theta = ((remrctp->payload[12]) << 8) | ((remrctp->payload[13]));
    return (_theta * 0.0000958752621833F) + -3.1415926535897931F;
}

static inline float REM_RobotCommandTesting_get_angle(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _angle = ((remrctp->payload[14]) << 8) | ((remrctp->payload[15]));
    return (_angle * 0.0000958752621833F) + -3.1415926535897931F;
}

static inline float REM_RobotCommandTesting_get_angularVelocity(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _angularVelocity = ((remrctp->payload[16]) << 8) | ((remrctp->payload[17]));
    return (_angularVelocity * 0.0009587526218325F) + -31.4159265358979312F;
}

static inline float REM_RobotCommandTesting_get_cameraAngle(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _cameraAngle = ((remrctp->payload[18]) << 8) | ((remrctp->payload[19]));
    return (_cameraAngle * 0.0000958752621833F) + -3.1415926535897931F;
}

static inline float REM_RobotCommandTesting_get_wheelSpeedRef1(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelSpeedRef1 = ((remrctp->payload[20]) << 8) | ((remrctp->payload[21]));
    return (_wheelSpeedRef1 * 0.0305180437933928F) + -1000.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelSpeedRef2(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelSpeedRef2 = ((remrctp->payload[22]) << 8) | ((remrctp->payload[23]));
    return (_wheelSpeedRef2 * 0.0305180437933928F) + -1000.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelSpeedRef3(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelSpeedRef3 = ((remrctp->payload[24]) << 8) | ((remrctp->payload[25]));
    return (_wheelSpeedRef3 * 0.0305180437933928F) + -1000.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelSpeedRef4(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelSpeedRef4 = ((remrctp->payload[26]) << 8) | ((remrctp->payload[27]));
    return (_wheelSpeedRef4 * 0.0305180437933928F) + -1000.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelPWM1(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelPWM1 = ((remrctp->payload[28]) << 8) | ((remrctp->payload[29]));
    return (_wheelPWM1 * 0.0000305180437934F) + -1.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelPWM2(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelPWM2 = ((remrctp->payload[30]) << 8) | ((remrctp->payload[31]));
    return (_wheelPWM2 * 0.0000305180437934F) + -1.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelPWM3(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelPWM3 = ((remrctp->payload[32]) << 8) | ((remrctp->payload[33]));
    return (_wheelPWM3 * 0.0000305180437934F) + -1.0000000000000000F;
}

static inline float REM_RobotCommandTesting_get_wheelPWM4(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _wheelPWM4 = ((remrctp->payload[34]) << 8) | ((remrctp->payload[35]));
    return (_wheelPWM4 * 0.0000305180437934F) + -1.0000000000000000F;
}

static inline bool REM_RobotCommandTesting_get_useWheelSpeedRef(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[36] & 0b10000000) > 0;
}

static inline bool REM_RobotCommandTesting_get_useWheelPWMRef(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[36] & 0b01000000) > 0;
}

static inline float REM_RobotCommandTesting_get_kickChipPower(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _kickChipPower = ((remrctp->payload[36] & 0b00111100) >> 2);
    return (_kickChipPower * 0.4333333333333333F);
}

static inline bool REM_RobotCommandTesting_get_doKick(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[36] & 0b00000010) > 0;
}

static inline bool REM_RobotCommandTesting_get_doChip(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[36] & 0b00000001) > 0;
}

static inline bool REM_RobotCommandTesting_get_kickAtAngle(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[37] & 0b10000000) > 0;
}

static inline bool REM_RobotCommandTesting_get_doForce(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[37] & 0b01000000) > 0;
}

static inline bool REM_RobotCommandTesting_get_feedback(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[37] & 0b00100000) > 0;
}

static inline bool REM_RobotCommandTesting_get_useCameraAngle(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[37] & 0b00010000) > 0;
}

static inline bool REM_RobotCommandTesting_get_useAbsoluteAngle(REM_RobotCommandTestingPayload *remrctp){
    return (remrctp->payload[37] & 0b00001000) > 0;
}

static inline uint32_t REM_RobotCommandTesting_get_unused(REM_RobotCommandTestingPayload *remrctp){
    return ((remrctp->payload[37] & 0b00000111));
}

static inline float REM_RobotCommandTesting_get_dribbler(REM_RobotCommandTestingPayload *remrctp){
    uint32_t _dribbler = ((remrctp->payload[38]));
    return (_dribbler * 0.0039215686274510F);
}

// ================================ SETTERS ================================
static inline void REM_RobotCommandTesting_set_header(REM_RobotCommandTestingPayload *remrctp, uint32_t header){
    remrctp->payload[0] = header;
}

static inline void REM_RobotCommandTesting_set_toRobotId(REM_RobotCommandTestingPayload *remrctp, uint32_t toRobotId){
    remrctp->payload[1] = ((toRobotId << 4) & 0b11110000) | (remrctp->payload[1] & 0b00001111);
}

static inline void REM_RobotCommandTesting_set_toColor(REM_RobotCommandTestingPayload *remrctp, bool toColor){
    remrctp->payload[1] = ((toColor << 3) & 0b00001000) | (remrctp->payload[1] & 0b11110111);
}

static inline void REM_RobotCommandTesting_set_toBC(REM_RobotCommandTestingPayload *remrctp, bool toBC){
    remrctp->payload[1] = ((toBC << 2) & 0b00000100) | (remrctp->payload[1] & 0b11111011);
}

static inline void REM_RobotCommandTesting_set_toBS(REM_RobotCommandTestingPayload *remrctp, bool toBS){
    remrctp->payload[1] = ((toBS << 1) & 0b00000010) | (remrctp->payload[1] & 0b11111101);
}

static inline void REM_RobotCommandTesting_set_toPC(REM_RobotCommandTestingPayload *remrctp, bool toPC){
    remrctp->payload[1] = (toPC & 0b00000001) | (remrctp->payload[1] & 0b11111110);
}

static inline void REM_RobotCommandTesting_set_fromRobotId(REM_RobotCommandTestingPayload *remrctp, uint32_t fromRobotId){
    remrctp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (remrctp->payload[2] & 0b00001111);
}

static inline void REM_RobotCommandTesting_set_fromColor(REM_RobotCommandTestingPayload *remrctp, bool fromColor){
    remrctp->payload[2] = ((fromColor << 3) & 0b00001000) | (remrctp->payload[2] & 0b11110111);
}

static inline void REM_RobotCommandTesting_set_reserved(REM_RobotCommandTestingPayload *remrctp, bool reserved){
    remrctp->payload[2] = ((reserved << 2) & 0b00000100) | (remrctp->payload[2] & 0b11111011);
}

static inline void REM_RobotCommandTesting_set_fromBS(REM_RobotCommandTestingPayload *remrctp, bool fromBS){
    remrctp->payload[2] = ((fromBS << 1) & 0b00000010) | (remrctp->payload[2] & 0b11111101);
}

static inline void REM_RobotCommandTesting_set_fromPC(REM_RobotCommandTestingPayload *remrctp, bool fromPC){
    remrctp->payload[2] = (fromPC & 0b00000001) | (remrctp->payload[2] & 0b11111110);
}

static inline void REM_RobotCommandTesting_set_remVersion(REM_RobotCommandTestingPayload *remrctp, uint32_t remVersion){
    remrctp->payload[3] = ((remVersion << 4) & 0b11110000) | (remrctp->payload[3] & 0b00001111);
}

static inline void REM_RobotCommandTesting_set_messageId(REM_RobotCommandTestingPayload *remrctp, uint32_t messageId){
    remrctp->payload[3] = (messageId & 0b00001111) | (remrctp->payload[3] & 0b11110000);
}

static inline void REM_RobotCommandTesting_set_timestamp(REM_RobotCommandTestingPayload *remrctp, uint64_t timestamp){
    remrctp->payload[4] = (timestamp >> 32);
    remrctp->payload[5] = (timestamp >> 24);
    remrctp->payload[6] = (timestamp >> 16);
    remrctp->payload[7] = (timestamp >> 8);
    remrctp->payload[8] = timestamp;
}

static inline void REM_RobotCommandTesting_set_payloadSize(REM_RobotCommandTestingPayload *remrctp, uint32_t payloadSize){
    remrctp->payload[9] = payloadSize;
}

static inline void REM_RobotCommandTesting_set_rho(REM_RobotCommandTestingPayload *remrctp, float rho){
    uint32_t _rho = (uint32_t)(rho / 0.0004577706569009F);
    remrctp->payload[10] = (_rho >> 8);
    remrctp->payload[11] = _rho;
}

static inline void REM_RobotCommandTesting_set_theta(REM_RobotCommandTestingPayload *remrctp, float theta){
    uint32_t _theta = (uint32_t)((theta +3.1415926535897931F) / 0.0000958752621833F);
    remrctp->payload[12] = (_theta >> 8);
    remrctp->payload[13] = _theta;
}

static inline void REM_RobotCommandTesting_set_angle(REM_RobotCommandTestingPayload *remrctp, float angle){
    uint32_t _angle = (uint32_t)((angle +3.1415926535897931F) / 0.0000958752621833F);
    remrctp->payload[14] = (_angle >> 8);
    remrctp->payload[15] = _angle;
}

static inline void REM_RobotCommandTesting_set_angularVelocity(REM_RobotCommandTestingPayload *remrctp, float angularVelocity){
    uint32_t _angularVelocity = (uint32_t)((angularVelocity +31.4159265358979312F) / 0.0009587526218325F);
    remrctp->payload[16] = (_angularVelocity >> 8);
    remrctp->payload[17] = _angularVelocity;
}

static inline void REM_RobotCommandTesting_set_cameraAngle(REM_RobotCommandTestingPayload *remrctp, float cameraAngle){
    uint32_t _cameraAngle = (uint32_t)((cameraAngle +3.1415926535897931F) / 0.0000958752621833F);
    remrctp->payload[18] = (_cameraAngle >> 8);
    remrctp->payload[19] = _cameraAngle;
}

static inline void REM_RobotCommandTesting_set_wheelSpeedRef1(REM_RobotCommandTestingPayload *remrctp, float wheelSpeedRef1){
    uint32_t _wheelSpeedRef1 = (uint32_t)((wheelSpeedRef1 +1000.0000000000000000F) / 0.0305180437933928F);
    remrctp->payload[20] = (_wheelSpeedRef1 >> 8);
    remrctp->payload[21] = _wheelSpeedRef1;
}

static inline void REM_RobotCommandTesting_set_wheelSpeedRef2(REM_RobotCommandTestingPayload *remrctp, float wheelSpeedRef2){
    uint32_t _wheelSpeedRef2 = (uint32_t)((wheelSpeedRef2 +1000.0000000000000000F) / 0.0305180437933928F);
    remrctp->payload[22] = (_wheelSpeedRef2 >> 8);
    remrctp->payload[23] = _wheelSpeedRef2;
}

static inline void REM_RobotCommandTesting_set_wheelSpeedRef3(REM_RobotCommandTestingPayload *remrctp, float wheelSpeedRef3){
    uint32_t _wheelSpeedRef3 = (uint32_t)((wheelSpeedRef3 +1000.0000000000000000F) / 0.0305180437933928F);
    remrctp->payload[24] = (_wheelSpeedRef3 >> 8);
    remrctp->payload[25] = _wheelSpeedRef3;
}

static inline void REM_RobotCommandTesting_set_wheelSpeedRef4(REM_RobotCommandTestingPayload *remrctp, float wheelSpeedRef4){
    uint32_t _wheelSpeedRef4 = (uint32_t)((wheelSpeedRef4 +1000.0000000000000000F) / 0.0305180437933928F);
    remrctp->payload[26] = (_wheelSpeedRef4 >> 8);
    remrctp->payload[27] = _wheelSpeedRef4;
}

static inline void REM_RobotCommandTesting_set_wheelPWM1(REM_RobotCommandTestingPayload *remrctp, float wheelPWM1){
    uint32_t _wheelPWM1 = (uint32_t)((wheelPWM1 +1.0000000000000000F) / 0.0000305180437934F);
    remrctp->payload[28] = (_wheelPWM1 >> 8);
    remrctp->payload[29] = _wheelPWM1;
}

static inline void REM_RobotCommandTesting_set_wheelPWM2(REM_RobotCommandTestingPayload *remrctp, float wheelPWM2){
    uint32_t _wheelPWM2 = (uint32_t)((wheelPWM2 +1.0000000000000000F) / 0.0000305180437934F);
    remrctp->payload[30] = (_wheelPWM2 >> 8);
    remrctp->payload[31] = _wheelPWM2;
}

static inline void REM_RobotCommandTesting_set_wheelPWM3(REM_RobotCommandTestingPayload *remrctp, float wheelPWM3){
    uint32_t _wheelPWM3 = (uint32_t)((wheelPWM3 +1.0000000000000000F) / 0.0000305180437934F);
    remrctp->payload[32] = (_wheelPWM3 >> 8);
    remrctp->payload[33] = _wheelPWM3;
}

static inline void REM_RobotCommandTesting_set_wheelPWM4(REM_RobotCommandTestingPayload *remrctp, float wheelPWM4){
    uint32_t _wheelPWM4 = (uint32_t)((wheelPWM4 +1.0000000000000000F) / 0.0000305180437934F);
    remrctp->payload[34] = (_wheelPWM4 >> 8);
    remrctp->payload[35] = _wheelPWM4;
}

static inline void REM_RobotCommandTesting_set_useWheelSpeedRef(REM_RobotCommandTestingPayload *remrctp, bool useWheelSpeedRef){
    remrctp->payload[36] = ((useWheelSpeedRef << 7) & 0b10000000) | (remrctp->payload[36] & 0b01111111);
}

static inline void REM_RobotCommandTesting_set_useWheelPWMRef(REM_RobotCommandTestingPayload *remrctp, bool useWheelPWMRef){
    remrctp->payload[36] = ((useWheelPWMRef << 6) & 0b01000000) | (remrctp->payload[36] & 0b10111111);
}

static inline void REM_RobotCommandTesting_set_kickChipPower(REM_RobotCommandTestingPayload *remrctp, float kickChipPower){
    uint32_t _kickChipPower = (uint32_t)(kickChipPower / 0.4333333333333333F);
    remrctp->payload[36] = ((_kickChipPower << 2) & 0b00111100) | (remrctp->payload[36] & 0b11000011);
}

static inline void REM_RobotCommandTesting_set_doKick(REM_RobotCommandTestingPayload *remrctp, bool doKick){
    remrctp->payload[36] = ((doKick << 1) & 0b00000010) | (remrctp->payload[36] & 0b11111101);
}

static inline void REM_RobotCommandTesting_set_doChip(REM_RobotCommandTestingPayload *remrctp, bool doChip){
    remrctp->payload[36] = (doChip & 0b00000001) | (remrctp->payload[36] & 0b11111110);
}

static inline void REM_RobotCommandTesting_set_kickAtAngle(REM_RobotCommandTestingPayload *remrctp, bool kickAtAngle){
    remrctp->payload[37] = ((kickAtAngle << 7) & 0b10000000) | (remrctp->payload[37] & 0b01111111);
}

static inline void REM_RobotCommandTesting_set_doForce(REM_RobotCommandTestingPayload *remrctp, bool doForce){
    remrctp->payload[37] = ((doForce << 6) & 0b01000000) | (remrctp->payload[37] & 0b10111111);
}

static inline void REM_RobotCommandTesting_set_feedback(REM_RobotCommandTestingPayload *remrctp, bool feedback){
    remrctp->payload[37] = ((feedback << 5) & 0b00100000) | (remrctp->payload[37] & 0b11011111);
}

static inline void REM_RobotCommandTesting_set_useCameraAngle(REM_RobotCommandTestingPayload *remrctp, bool useCameraAngle){
    remrctp->payload[37] = ((useCameraAngle << 4) & 0b00010000) | (remrctp->payload[37] & 0b11101111);
}

static inline void REM_RobotCommandTesting_set_useAbsoluteAngle(REM_RobotCommandTestingPayload *remrctp, bool useAbsoluteAngle){
    remrctp->payload[37] = ((useAbsoluteAngle << 3) & 0b00001000) | (remrctp->payload[37] & 0b11110111);
}

static inline void REM_RobotCommandTesting_set_unused(REM_RobotCommandTestingPayload *remrctp, uint32_t unused){
    remrctp->payload[37] = (unused & 0b00000111) | (remrctp->payload[37] & 0b11111000);
}

static inline void REM_RobotCommandTesting_set_dribbler(REM_RobotCommandTestingPayload *remrctp, float dribbler){
    uint32_t _dribbler = (uint32_t)(dribbler / 0.0039215686274510F);
    remrctp->payload[38] = _dribbler;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotCommandTesting(REM_RobotCommandTestingPayload *remrctp, REM_RobotCommandTesting *remrct){
    REM_RobotCommandTesting_set_header              (remrctp, remrct->header);
    REM_RobotCommandTesting_set_toRobotId           (remrctp, remrct->toRobotId);
    REM_RobotCommandTesting_set_toColor             (remrctp, remrct->toColor);
    REM_RobotCommandTesting_set_toBC                (remrctp, remrct->toBC);
    REM_RobotCommandTesting_set_toBS                (remrctp, remrct->toBS);
    REM_RobotCommandTesting_set_toPC                (remrctp, remrct->toPC);
    REM_RobotCommandTesting_set_fromRobotId         (remrctp, remrct->fromRobotId);
    REM_RobotCommandTesting_set_fromColor           (remrctp, remrct->fromColor);
    REM_RobotCommandTesting_set_reserved            (remrctp, remrct->reserved);
    REM_RobotCommandTesting_set_fromBS              (remrctp, remrct->fromBS);
    REM_RobotCommandTesting_set_fromPC              (remrctp, remrct->fromPC);
    REM_RobotCommandTesting_set_remVersion          (remrctp, remrct->remVersion);
    REM_RobotCommandTesting_set_messageId           (remrctp, remrct->messageId);
    REM_RobotCommandTesting_set_timestamp           (remrctp, remrct->timestamp);
    REM_RobotCommandTesting_set_payloadSize         (remrctp, remrct->payloadSize);
    REM_RobotCommandTesting_set_rho                 (remrctp, remrct->rho);
    REM_RobotCommandTesting_set_theta               (remrctp, remrct->theta);
    REM_RobotCommandTesting_set_angle               (remrctp, remrct->angle);
    REM_RobotCommandTesting_set_angularVelocity     (remrctp, remrct->angularVelocity);
    REM_RobotCommandTesting_set_cameraAngle         (remrctp, remrct->cameraAngle);
    REM_RobotCommandTesting_set_wheelSpeedRef1      (remrctp, remrct->wheelSpeedRef1);
    REM_RobotCommandTesting_set_wheelSpeedRef2      (remrctp, remrct->wheelSpeedRef2);
    REM_RobotCommandTesting_set_wheelSpeedRef3      (remrctp, remrct->wheelSpeedRef3);
    REM_RobotCommandTesting_set_wheelSpeedRef4      (remrctp, remrct->wheelSpeedRef4);
    REM_RobotCommandTesting_set_wheelPWM1           (remrctp, remrct->wheelPWM1);
    REM_RobotCommandTesting_set_wheelPWM2           (remrctp, remrct->wheelPWM2);
    REM_RobotCommandTesting_set_wheelPWM3           (remrctp, remrct->wheelPWM3);
    REM_RobotCommandTesting_set_wheelPWM4           (remrctp, remrct->wheelPWM4);
    REM_RobotCommandTesting_set_useWheelSpeedRef    (remrctp, remrct->useWheelSpeedRef);
    REM_RobotCommandTesting_set_useWheelPWMRef      (remrctp, remrct->useWheelPWMRef);
    REM_RobotCommandTesting_set_kickChipPower       (remrctp, remrct->kickChipPower);
    REM_RobotCommandTesting_set_doKick              (remrctp, remrct->doKick);
    REM_RobotCommandTesting_set_doChip              (remrctp, remrct->doChip);
    REM_RobotCommandTesting_set_kickAtAngle         (remrctp, remrct->kickAtAngle);
    REM_RobotCommandTesting_set_doForce             (remrctp, remrct->doForce);
    REM_RobotCommandTesting_set_feedback            (remrctp, remrct->feedback);
    REM_RobotCommandTesting_set_useCameraAngle      (remrctp, remrct->useCameraAngle);
    REM_RobotCommandTesting_set_useAbsoluteAngle    (remrctp, remrct->useAbsoluteAngle);
    REM_RobotCommandTesting_set_unused              (remrctp, remrct->unused);
    REM_RobotCommandTesting_set_dribbler            (remrctp, remrct->dribbler);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotCommandTesting(REM_RobotCommandTesting *remrct, REM_RobotCommandTestingPayload *remrctp){
    remrct->header       = REM_RobotCommandTesting_get_header(remrctp);
    remrct->toRobotId    = REM_RobotCommandTesting_get_toRobotId(remrctp);
    remrct->toColor      = REM_RobotCommandTesting_get_toColor(remrctp);
    remrct->toBC         = REM_RobotCommandTesting_get_toBC(remrctp);
    remrct->toBS         = REM_RobotCommandTesting_get_toBS(remrctp);
    remrct->toPC         = REM_RobotCommandTesting_get_toPC(remrctp);
    remrct->fromRobotId  = REM_RobotCommandTesting_get_fromRobotId(remrctp);
    remrct->fromColor    = REM_RobotCommandTesting_get_fromColor(remrctp);
    remrct->reserved     = REM_RobotCommandTesting_get_reserved(remrctp);
    remrct->fromBS       = REM_RobotCommandTesting_get_fromBS(remrctp);
    remrct->fromPC       = REM_RobotCommandTesting_get_fromPC(remrctp);
    remrct->remVersion   = REM_RobotCommandTesting_get_remVersion(remrctp);
    remrct->messageId    = REM_RobotCommandTesting_get_messageId(remrctp);
    remrct->timestamp    = REM_RobotCommandTesting_get_timestamp(remrctp);
    remrct->payloadSize  = REM_RobotCommandTesting_get_payloadSize(remrctp);
    remrct->rho          = REM_RobotCommandTesting_get_rho(remrctp);
    remrct->theta        = REM_RobotCommandTesting_get_theta(remrctp);
    remrct->angle        = REM_RobotCommandTesting_get_angle(remrctp);
    remrct->angularVelocity= REM_RobotCommandTesting_get_angularVelocity(remrctp);
    remrct->cameraAngle  = REM_RobotCommandTesting_get_cameraAngle(remrctp);
    remrct->wheelSpeedRef1= REM_RobotCommandTesting_get_wheelSpeedRef1(remrctp);
    remrct->wheelSpeedRef2= REM_RobotCommandTesting_get_wheelSpeedRef2(remrctp);
    remrct->wheelSpeedRef3= REM_RobotCommandTesting_get_wheelSpeedRef3(remrctp);
    remrct->wheelSpeedRef4= REM_RobotCommandTesting_get_wheelSpeedRef4(remrctp);
    remrct->wheelPWM1    = REM_RobotCommandTesting_get_wheelPWM1(remrctp);
    remrct->wheelPWM2    = REM_RobotCommandTesting_get_wheelPWM2(remrctp);
    remrct->wheelPWM3    = REM_RobotCommandTesting_get_wheelPWM3(remrctp);
    remrct->wheelPWM4    = REM_RobotCommandTesting_get_wheelPWM4(remrctp);
    remrct->useWheelSpeedRef= REM_RobotCommandTesting_get_useWheelSpeedRef(remrctp);
    remrct->useWheelPWMRef= REM_RobotCommandTesting_get_useWheelPWMRef(remrctp);
    remrct->kickChipPower= REM_RobotCommandTesting_get_kickChipPower(remrctp);
    remrct->doKick       = REM_RobotCommandTesting_get_doKick(remrctp);
    remrct->doChip       = REM_RobotCommandTesting_get_doChip(remrctp);
    remrct->kickAtAngle  = REM_RobotCommandTesting_get_kickAtAngle(remrctp);
    remrct->doForce      = REM_RobotCommandTesting_get_doForce(remrctp);
    remrct->feedback     = REM_RobotCommandTesting_get_feedback(remrctp);
    remrct->useCameraAngle= REM_RobotCommandTesting_get_useCameraAngle(remrctp);
    remrct->useAbsoluteAngle= REM_RobotCommandTesting_get_useAbsoluteAngle(remrctp);
    remrct->unused       = REM_RobotCommandTesting_get_unused(remrctp);
    remrct->dribbler     = REM_RobotCommandTesting_get_dribbler(remrctp);
}

#endif /*__REM_ROBOT_COMMAND_TESTING_H*/
