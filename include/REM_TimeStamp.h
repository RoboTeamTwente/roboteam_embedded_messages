// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- needTimeStamp
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- timestamp
-------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 11111111 11111111 TimeStamp
*/

#ifndef __REM_TIME_STAMP_H
#define __REM_TIME_STAMP_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_TimeStampPayload {
    uint8_t payload[REM_PACKET_SIZE_REM_TIME_STAMP];
} REM_TimeStampPayload;

typedef struct _REM_TimeStamp {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    bool       needTimeStamp       ; // integer [0, 1]               Bit indicating that source device needs unix timestamp
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint32_t   timestamp           ; // integer [0, 16777215]        Timestamp in milliseconds
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    uint64_t   TimeStamp           ; // integer [0, 281474976710655] Unix TimeStamp
} REM_TimeStamp;

// ================================ GETTERS ================================
static inline uint32_t REM_TimeStamp_get_header(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[0]));
}

static inline uint32_t REM_TimeStamp_get_toRobotId(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_TimeStamp_get_toColor(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_TimeStamp_get_toBC(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_TimeStamp_get_toBS(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_TimeStamp_get_toPC(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_TimeStamp_get_fromRobotId(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_TimeStamp_get_fromColor(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_TimeStamp_get_fromBS(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_TimeStamp_get_fromPC(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_TimeStamp_get_needTimeStamp(REM_TimeStampPayload *remtsp){
    return (remtsp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_TimeStamp_get_remVersion(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_TimeStamp_get_messageId(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[3] & 0b00001111));
}

static inline uint32_t REM_TimeStamp_get_timestamp(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[4]) << 16) | ((remtsp->payload[5]) << 8) | ((remtsp->payload[6]));
}

static inline uint32_t REM_TimeStamp_get_payloadSize(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[7]));
}

static inline uint64_t REM_TimeStamp_get_TimeStamp(REM_TimeStampPayload *remtsp){
    return ((remtsp->payload[8]) << 40) | ((remtsp->payload[9]) << 32) | ((remtsp->payload[10]) << 24) | ((remtsp->payload[11]) << 16) | ((remtsp->payload[12]) << 8) | ((remtsp->payload[13]));
}

// ================================ SETTERS ================================
static inline void REM_TimeStamp_set_header(REM_TimeStampPayload *remtsp, uint32_t header){
    remtsp->payload[0] = header;
}

static inline void REM_TimeStamp_set_toRobotId(REM_TimeStampPayload *remtsp, uint32_t toRobotId){
    remtsp->payload[1] = ((toRobotId << 4) & 0b11110000) | (remtsp->payload[1] & 0b00001111);
}

static inline void REM_TimeStamp_set_toColor(REM_TimeStampPayload *remtsp, bool toColor){
    remtsp->payload[1] = ((toColor << 3) & 0b00001000) | (remtsp->payload[1] & 0b11110111);
}

static inline void REM_TimeStamp_set_toBC(REM_TimeStampPayload *remtsp, bool toBC){
    remtsp->payload[1] = ((toBC << 2) & 0b00000100) | (remtsp->payload[1] & 0b11111011);
}

static inline void REM_TimeStamp_set_toBS(REM_TimeStampPayload *remtsp, bool toBS){
    remtsp->payload[1] = ((toBS << 1) & 0b00000010) | (remtsp->payload[1] & 0b11111101);
}

static inline void REM_TimeStamp_set_toPC(REM_TimeStampPayload *remtsp, bool toPC){
    remtsp->payload[1] = (toPC & 0b00000001) | (remtsp->payload[1] & 0b11111110);
}

static inline void REM_TimeStamp_set_fromRobotId(REM_TimeStampPayload *remtsp, uint32_t fromRobotId){
    remtsp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (remtsp->payload[2] & 0b00001111);
}

static inline void REM_TimeStamp_set_fromColor(REM_TimeStampPayload *remtsp, bool fromColor){
    remtsp->payload[2] = ((fromColor << 3) & 0b00001000) | (remtsp->payload[2] & 0b11110111);
}

static inline void REM_TimeStamp_set_fromBS(REM_TimeStampPayload *remtsp, bool fromBS){
    remtsp->payload[2] = ((fromBS << 2) & 0b00000100) | (remtsp->payload[2] & 0b11111011);
}

static inline void REM_TimeStamp_set_fromPC(REM_TimeStampPayload *remtsp, bool fromPC){
    remtsp->payload[2] = ((fromPC << 1) & 0b00000010) | (remtsp->payload[2] & 0b11111101);
}

static inline void REM_TimeStamp_set_needTimeStamp(REM_TimeStampPayload *remtsp, bool needTimeStamp){
    remtsp->payload[2] = (needTimeStamp & 0b00000001) | (remtsp->payload[2] & 0b11111110);
}

static inline void REM_TimeStamp_set_remVersion(REM_TimeStampPayload *remtsp, uint32_t remVersion){
    remtsp->payload[3] = ((remVersion << 4) & 0b11110000) | (remtsp->payload[3] & 0b00001111);
}

static inline void REM_TimeStamp_set_messageId(REM_TimeStampPayload *remtsp, uint32_t messageId){
    remtsp->payload[3] = (messageId & 0b00001111) | (remtsp->payload[3] & 0b11110000);
}

static inline void REM_TimeStamp_set_timestamp(REM_TimeStampPayload *remtsp, uint32_t timestamp){
    remtsp->payload[4] = (timestamp >> 16);
    remtsp->payload[5] = (timestamp >> 8);
    remtsp->payload[6] = timestamp;
}

static inline void REM_TimeStamp_set_payloadSize(REM_TimeStampPayload *remtsp, uint32_t payloadSize){
    remtsp->payload[7] = payloadSize;
}

static inline void REM_TimeStamp_set_TimeStamp(REM_TimeStampPayload *remtsp, uint64_t TimeStamp){
    remtsp->payload[8] = (TimeStamp >> 40);
    remtsp->payload[9] = (TimeStamp >> 32);
    remtsp->payload[10] = (TimeStamp >> 24);
    remtsp->payload[11] = (TimeStamp >> 16);
    remtsp->payload[12] = (TimeStamp >> 8);
    remtsp->payload[13] = TimeStamp;
}

// ================================ ENCODE ================================
static inline void encodeREM_TimeStamp(REM_TimeStampPayload *remtsp, REM_TimeStamp *remts){
    REM_TimeStamp_set_header              (remtsp, remts->header);
    REM_TimeStamp_set_toRobotId           (remtsp, remts->toRobotId);
    REM_TimeStamp_set_toColor             (remtsp, remts->toColor);
    REM_TimeStamp_set_toBC                (remtsp, remts->toBC);
    REM_TimeStamp_set_toBS                (remtsp, remts->toBS);
    REM_TimeStamp_set_toPC                (remtsp, remts->toPC);
    REM_TimeStamp_set_fromRobotId         (remtsp, remts->fromRobotId);
    REM_TimeStamp_set_fromColor           (remtsp, remts->fromColor);
    REM_TimeStamp_set_fromBS              (remtsp, remts->fromBS);
    REM_TimeStamp_set_fromPC              (remtsp, remts->fromPC);
    REM_TimeStamp_set_needTimeStamp       (remtsp, remts->needTimeStamp);
    REM_TimeStamp_set_remVersion          (remtsp, remts->remVersion);
    REM_TimeStamp_set_messageId           (remtsp, remts->messageId);
    REM_TimeStamp_set_timestamp           (remtsp, remts->timestamp);
    REM_TimeStamp_set_payloadSize         (remtsp, remts->payloadSize);
    REM_TimeStamp_set_TimeStamp           (remtsp, remts->TimeStamp);
}

// ================================ DECODE ================================
static inline void decodeREM_TimeStamp(REM_TimeStamp *remts, REM_TimeStampPayload *remtsp){
    remts->header        = REM_TimeStamp_get_header(remtsp);
    remts->toRobotId     = REM_TimeStamp_get_toRobotId(remtsp);
    remts->toColor       = REM_TimeStamp_get_toColor(remtsp);
    remts->toBC          = REM_TimeStamp_get_toBC(remtsp);
    remts->toBS          = REM_TimeStamp_get_toBS(remtsp);
    remts->toPC          = REM_TimeStamp_get_toPC(remtsp);
    remts->fromRobotId   = REM_TimeStamp_get_fromRobotId(remtsp);
    remts->fromColor     = REM_TimeStamp_get_fromColor(remtsp);
    remts->fromBS        = REM_TimeStamp_get_fromBS(remtsp);
    remts->fromPC        = REM_TimeStamp_get_fromPC(remtsp);
    remts->needTimeStamp = REM_TimeStamp_get_needTimeStamp(remtsp);
    remts->remVersion    = REM_TimeStamp_get_remVersion(remtsp);
    remts->messageId     = REM_TimeStamp_get_messageId(remtsp);
    remts->timestamp     = REM_TimeStamp_get_timestamp(remtsp);
    remts->payloadSize   = REM_TimeStamp_get_payloadSize(remtsp);
    remts->TimeStamp     = REM_TimeStamp_get_TimeStamp(remtsp);
}

#endif /*__REM_TIME_STAMP_H*/
