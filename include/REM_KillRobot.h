// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ]
11111111 -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 11111111 11111111 -------- timestamp
-------- -------- -------- -------- -------- -------- -------- 11111111 payloadSize
*/

#ifndef __REM_KILL_ROBOT_H
#define __REM_KILL_ROBOT_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_KillRobotPayload {
    uint8_t payload[REM_PACKET_SIZE_REM_KILL_ROBOT];
} REM_KillRobotPayload;

typedef struct _REM_KillRobot {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       reserved            ; // integer [0, 1]               reserved
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint32_t   timestamp           ; // integer [0, 16777215]        Timestamp in milliseconds
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
} REM_KillRobot;

// ================================ GETTERS ================================
static inline uint32_t REM_KillRobot_get_header(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[0]));
}

static inline uint32_t REM_KillRobot_get_toRobotId(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_KillRobot_get_toColor(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_KillRobot_get_toBC(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_KillRobot_get_toBS(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_KillRobot_get_toPC(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_KillRobot_get_fromRobotId(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_KillRobot_get_fromColor(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_KillRobot_get_reserved(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_KillRobot_get_fromBS(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_KillRobot_get_fromPC(REM_KillRobotPayload *remkrp){
    return (remkrp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_KillRobot_get_remVersion(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_KillRobot_get_messageId(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[3] & 0b00001111));
}

static inline uint32_t REM_KillRobot_get_timestamp(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[4]) << 16) | ((remkrp->payload[5]) << 8) | ((remkrp->payload[6]));
}

static inline uint32_t REM_KillRobot_get_payloadSize(REM_KillRobotPayload *remkrp){
    return ((remkrp->payload[7]));
}

// ================================ SETTERS ================================
static inline void REM_KillRobot_set_header(REM_KillRobotPayload *remkrp, uint32_t header){
    remkrp->payload[0] = header;
}

static inline void REM_KillRobot_set_toRobotId(REM_KillRobotPayload *remkrp, uint32_t toRobotId){
    remkrp->payload[1] = ((toRobotId << 4) & 0b11110000) | (remkrp->payload[1] & 0b00001111);
}

static inline void REM_KillRobot_set_toColor(REM_KillRobotPayload *remkrp, bool toColor){
    remkrp->payload[1] = ((toColor << 3) & 0b00001000) | (remkrp->payload[1] & 0b11110111);
}

static inline void REM_KillRobot_set_toBC(REM_KillRobotPayload *remkrp, bool toBC){
    remkrp->payload[1] = ((toBC << 2) & 0b00000100) | (remkrp->payload[1] & 0b11111011);
}

static inline void REM_KillRobot_set_toBS(REM_KillRobotPayload *remkrp, bool toBS){
    remkrp->payload[1] = ((toBS << 1) & 0b00000010) | (remkrp->payload[1] & 0b11111101);
}

static inline void REM_KillRobot_set_toPC(REM_KillRobotPayload *remkrp, bool toPC){
    remkrp->payload[1] = (toPC & 0b00000001) | (remkrp->payload[1] & 0b11111110);
}

static inline void REM_KillRobot_set_fromRobotId(REM_KillRobotPayload *remkrp, uint32_t fromRobotId){
    remkrp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (remkrp->payload[2] & 0b00001111);
}

static inline void REM_KillRobot_set_fromColor(REM_KillRobotPayload *remkrp, bool fromColor){
    remkrp->payload[2] = ((fromColor << 3) & 0b00001000) | (remkrp->payload[2] & 0b11110111);
}

static inline void REM_KillRobot_set_reserved(REM_KillRobotPayload *remkrp, bool reserved){
    remkrp->payload[2] = ((reserved << 2) & 0b00000100) | (remkrp->payload[2] & 0b11111011);
}

static inline void REM_KillRobot_set_fromBS(REM_KillRobotPayload *remkrp, bool fromBS){
    remkrp->payload[2] = ((fromBS << 1) & 0b00000010) | (remkrp->payload[2] & 0b11111101);
}

static inline void REM_KillRobot_set_fromPC(REM_KillRobotPayload *remkrp, bool fromPC){
    remkrp->payload[2] = (fromPC & 0b00000001) | (remkrp->payload[2] & 0b11111110);
}

static inline void REM_KillRobot_set_remVersion(REM_KillRobotPayload *remkrp, uint32_t remVersion){
    remkrp->payload[3] = ((remVersion << 4) & 0b11110000) | (remkrp->payload[3] & 0b00001111);
}

static inline void REM_KillRobot_set_messageId(REM_KillRobotPayload *remkrp, uint32_t messageId){
    remkrp->payload[3] = (messageId & 0b00001111) | (remkrp->payload[3] & 0b11110000);
}

static inline void REM_KillRobot_set_timestamp(REM_KillRobotPayload *remkrp, uint32_t timestamp){
    remkrp->payload[4] = (timestamp >> 16);
    remkrp->payload[5] = (timestamp >> 8);
    remkrp->payload[6] = timestamp;
}

static inline void REM_KillRobot_set_payloadSize(REM_KillRobotPayload *remkrp, uint32_t payloadSize){
    remkrp->payload[7] = payloadSize;
}

// ================================ ENCODE ================================
static inline void encodeREM_KillRobot(REM_KillRobotPayload *remkrp, REM_KillRobot *remkr){
    REM_KillRobot_set_header              (remkrp, remkr->header);
    REM_KillRobot_set_toRobotId           (remkrp, remkr->toRobotId);
    REM_KillRobot_set_toColor             (remkrp, remkr->toColor);
    REM_KillRobot_set_toBC                (remkrp, remkr->toBC);
    REM_KillRobot_set_toBS                (remkrp, remkr->toBS);
    REM_KillRobot_set_toPC                (remkrp, remkr->toPC);
    REM_KillRobot_set_fromRobotId         (remkrp, remkr->fromRobotId);
    REM_KillRobot_set_fromColor           (remkrp, remkr->fromColor);
    REM_KillRobot_set_reserved            (remkrp, remkr->reserved);
    REM_KillRobot_set_fromBS              (remkrp, remkr->fromBS);
    REM_KillRobot_set_fromPC              (remkrp, remkr->fromPC);
    REM_KillRobot_set_remVersion          (remkrp, remkr->remVersion);
    REM_KillRobot_set_messageId           (remkrp, remkr->messageId);
    REM_KillRobot_set_timestamp           (remkrp, remkr->timestamp);
    REM_KillRobot_set_payloadSize         (remkrp, remkr->payloadSize);
}

// ================================ DECODE ================================
static inline void decodeREM_KillRobot(REM_KillRobot *remkr, REM_KillRobotPayload *remkrp){
    remkr->header        = REM_KillRobot_get_header(remkrp);
    remkr->toRobotId     = REM_KillRobot_get_toRobotId(remkrp);
    remkr->toColor       = REM_KillRobot_get_toColor(remkrp);
    remkr->toBC          = REM_KillRobot_get_toBC(remkrp);
    remkr->toBS          = REM_KillRobot_get_toBS(remkrp);
    remkr->toPC          = REM_KillRobot_get_toPC(remkrp);
    remkr->fromRobotId   = REM_KillRobot_get_fromRobotId(remkrp);
    remkr->fromColor     = REM_KillRobot_get_fromColor(remkrp);
    remkr->reserved      = REM_KillRobot_get_reserved(remkrp);
    remkr->fromBS        = REM_KillRobot_get_fromBS(remkrp);
    remkr->fromPC        = REM_KillRobot_get_fromPC(remkrp);
    remkr->remVersion    = REM_KillRobot_get_remVersion(remkrp);
    remkr->messageId     = REM_KillRobot_get_messageId(remkrp);
    remkr->timestamp     = REM_KillRobot_get_timestamp(remkrp);
    remkr->payloadSize   = REM_KillRobot_get_payloadSize(remkrp);
}

#endif /*__REM_KILL_ROBOT_H*/
